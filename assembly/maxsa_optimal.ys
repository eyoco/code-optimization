.pos 0x100
main:
    irmovq $stackEnd, %rsp # rsp = $stackEnd
    irmovq $array, %rdi # rdi = $array
    irmovq $arraySize, %rsi # rsi = $arraySize(size)
    irmovq $resultStart, %rdx # rdx = $resultStart(sa_start)
    irmovq $resultEnd, %rcx # rcx = $resultEnd(sa_end)
    mrmovq (%rsi), %rsi # rsi = m[rsi] = m[$arraySize(size]
    call   maxSubArray # to maxSubArray
    irmovq $resultSum, %r8 # r8 = $resultSum
    rmmovq %rax, (%r8) # m[r8] = m[resultSum] = return value of maxSubArray
    halt

.pos 0x1000
maxSubArray:
    irmovq $1, %r9 #  
    pushq  %r13 #  
    subq   %rsi, %r9 #
    jne    L1 # if(size !== 1) goto L1
L10:
    rmmovq %rdi, (%rcx) # *sa_end = array
    rmmovq %rdi, (%rdx) # *sa_start = array
    mrmovq (%rdi), %r13 # return *array
    jmp    L11 # goto L9
L50:
    mrmovq (%r14), %r12 #
    addq   %r12, %r9 # sum += *ptr
    rrmovq %r9, %r12 # r12 is sum
    #rrmovq %rbp, %r12 # r12 is sum
    subq   %r13, %r12 # r13 is rightsum
    jle    L51 #sum > rightsum, if sum <= rightsum goto L6
    rrmovq %r9, %r13 # rightsum = sum
    #rrmovq %rbp, %r13 # rightsum = sum
    rmmovq %r14, (%rcx) # *sa_end = ptr
jmp L51
L1:
    pushq  %rbx
    irmovq $2, %r10 #
    rrmovq %rsi, %rbx #
    pushq  %rbp
    irmovq $8, %rbp #
    divq   %r10, %rbx # long half = size >> 1
    pushq  %r12
    irmovq $8, %r8 #
    mulq   %rbx, %rbp #
    addq   %rdi, %rbp #
    pushq  %r14
    rrmovq %rsi, %r9 #
    xorq   %rax, %rax #0
    rrmovq %rbp, %r11 #
    irmovq $0x8000000000000000, %r10 # leftsum = 0
    irmovq $0x8000000000000000, %r13 # rightsum = 0
    subq   %r8, %r11 # ptr = mid - 1, ptr is left start, r11, left ptr,
    rrmovq %rbp, %r14# r14 is right start, right ptr
    xorq    %r9, %r9
L2:
    mrmovq (%r11), %r12 #  
    addq   %r12, %rax # sum += *ptr
    rrmovq %rax, %r12 # r12 is sum
    subq   %r10, %r12 # r10 is leftsum
    jle    L5 # sum > leftsum, if sum <= leftsum goto L3
    rrmovq %rax, %r10 # leftsum = sum  
    rmmovq %r11, (%rdx) # *sa_start = ptr
L5:
    mrmovq (%r14), %r12 #
    subq   %r8, %r11 #  ptr--
   
    addq   %r12, %r9 # sum += *ptr
    rrmovq %r9, %r12 # r12 is sum
    subq   %r13, %r12 # r13 is rightsum
    jle    L6 #sum > rightsum, if sum <= rightsum goto L6
    rrmovq %r9, %r13 # rightsum = sum
    rmmovq %r14, (%rcx) # *sa_end = ptr
L6:
    rrmovq %r11, %r12 #
    subq   %rdi, %r12 #
    jl     L7 # ptr >= array, if ptr < array goto L4
    addq   %r8, %r14 # ptr++
    jmp    L2 # goto L5
L7:
    #popq   %rbp
    addq   %r8, %r14 # ptr++
    rrmovq %rdi, %r12 #
addq %rsi, %r12
subq %r14, %r12
jg L50
    subq %r8, %r14

L51:
    addq   %r10, %r13 # bestsum = leftsum + rightsum
    rrmovq %rsi, %r9 #
    rrmovq %rcx, %r14 # sub_end
    rrmovq %rdx, %r12 # sub_start
    pushq  %rdx # put rdx on stack
    subq   %rbx, %r9 #
    rrmovq %rbx, %rsi #
    rrmovq %rsp, %rdx # rdx = rsp = $stackEnd
    pushq  %rcx # put rcx on stack
    rrmovq %r9, %rbx #
    rrmovq %rsp, %rcx # rcx = rsp = $stackEnd
    call   maxSubArray # call maxSubArray, maxsa(array, half, &sub_start, &sub_end)
    popq   %rcx # put rcx off stack
    rrmovq %rax, %r9 # r9 = return value of maxSubArray, sum
    popq   %rdx # put rdx off stack
    subq   %r13, %r9 #
    jle    L8 # sum > bestsum, if sum <= bestsum goto L8
    rrmovq %rax, %r13 # bestsum = sum
    rmmovq %rdx, (%r12) # *sa_start = sub_start
    rmmovq %rcx, (%r14) # *sa_end = sub_end
L8:
    pushq  %rdx # put rdx on the stack, sub_start
    rrmovq %rbp, %rdi # rdi = rbp = $array, array = mid
    rrmovq %rsp, %rdx # rdx = rsp = $stackEnd
    pushq  %rcx # put rcx on the stack, sub_end
    rrmovq %rbx, %rsi # half
    rrmovq %rsp, %rcx
    call   maxSubArray
    popq   %rcx
    rrmovq %rax, %r9 # sum
    popq   %rdx
    subq   %r13, %r9 #
    jle    L9 # sum > bestsum, if sum <= bestsum goto L9
    rrmovq %rax, %r13 # bestsum = sum
    rmmovq %rdx, (%r12) # *sa_start = sub_start
    rmmovq %rcx, (%r14) # *sa_end = sub_end
L9:
    popq   %r14 # put r14 off stack
    popq   %r12 # put r12 off stack
    popq   %rbp # put rbp off stack
    popq   %rbx # put rbx off stack
    #ret
   
L11:
    rrmovq %r13, %rax
    popq %r13
    ret
   
   
   
.pos 0x2000
array:
    .quad 13
    .quad -3
    .quad -25
    .quad -20
    .quad -3
    .quad -16
    .quad -23
    .quad 18
    .quad 20
    .quad -7
    .quad 12
    .quad -5
    .quad -22
    .quad 15
    .quad -4
    .quad 7
arraySize:
    .quad 16

.pos 0x2500
resultStart:
    .quad 0
resultEnd:
    .quad 0
resultSum:
    .quad 0

.pos 0x4000
stack:
    .quad 0, 1000
stackEnd:
    .quad 0
